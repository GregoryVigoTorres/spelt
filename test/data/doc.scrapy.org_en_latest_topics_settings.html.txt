
First steps Scrapy at a glance Installation guide Scrapy Tutorial Examples Basic concepts Command line tool Spiders Selectors Items Item Loaders Scrapy shell Item Pipeline Feed exports Requests and Responses Link Extractors Settings
Designating the settings Populating the settings
1. Command line options 2. Settings per-spider 3. Project settings module 4. Default settings per-command 5. Default global settings How to access settings Rationale for setting names Built-in settings reference
AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY BOT_NAME CONCURRENT_ITEMS CONCURRENT_REQUESTS CONCURRENT_REQUESTS_PER_DOMAIN CONCURRENT_REQUESTS_PER_IP DEFAULT_ITEM_CLASS DEFAULT_REQUEST_HEADERS DEPTH_LIMIT DEPTH_PRIORITY DEPTH_STATS DEPTH_STATS_VERBOSE DNSCACHE_ENABLED DNSCACHE_SIZE DNS_TIMEOUT DOWNLOADER DOWNLOADER_HTTPCLIENTFACTORY DOWNLOADER_CLIENTCONTEXTFACTORY DOWNLOADER_CLIENT_TLS_METHOD DOWNLOADER_MIDDLEWARES DOWNLOADER_MIDDLEWARES_BASE DOWNLOADER_STATS DOWNLOAD_DELAY DOWNLOAD_HANDLERS DOWNLOAD_HANDLERS_BASE DOWNLOAD_TIMEOUT DOWNLOAD_MAXSIZE DOWNLOAD_WARNSIZE DUPEFILTER_CLASS DUPEFILTER_DEBUG EDITOR EXTENSIONS EXTENSIONS_BASE FEED_TEMPDIR ITEM_PIPELINES ITEM_PIPELINES_BASE LOG_ENABLED LOG_ENCODING LOG_FILE LOG_FORMAT LOG_DATEFORMAT LOG_LEVEL LOG_STDOUT LOG_SHORT_NAMES MEMDEBUG_ENABLED MEMDEBUG_NOTIFY MEMUSAGE_ENABLED MEMUSAGE_LIMIT_MB MEMUSAGE_CHECK_INTERVAL_SECONDS MEMUSAGE_NOTIFY_MAIL MEMUSAGE_REPORT MEMUSAGE_WARNING_MB NEWSPIDER_MODULE RANDOMIZE_DOWNLOAD_DELAY REACTOR_THREADPOOL_MAXSIZE REDIRECT_MAX_TIMES REDIRECT_PRIORITY_ADJUST RETRY_PRIORITY_ADJUST ROBOTSTXT_OBEY SCHEDULER SCHEDULER_DEBUG SCHEDULER_DISK_QUEUE SCHEDULER_MEMORY_QUEUE SCHEDULER_PRIORITY_QUEUE SPIDER_CONTRACTS SPIDER_CONTRACTS_BASE SPIDER_LOADER_CLASS SPIDER_MIDDLEWARES SPIDER_MIDDLEWARES_BASE SPIDER_MODULES STATS_CLASS STATS_DUMP STATSMAILER_RCPTS TELNETCONSOLE_ENABLED TELNETCONSOLE_PORT TEMPLATES_DIR URLLENGTH_LIMIT USER_AGENT Settings documented elsewhere: Exceptions Built-in services Logging Stats Collection Sending e-mail Telnet Console Web Service Solving specific problems Frequently Asked Questions Debugging Spiders Spiders Contracts Common Practices Broad Crawls Using Firefox for scraping Using Firebug for scraping Debugging memory leaks Downloading and processing files and images Deploying Spiders AutoThrottle extension Benchmarking Jobs: pausing and resuming crawls Extending Scrapy Architecture overview Downloader Middleware Spider Middleware Extensions Core API Signals Item Exporters All the rest Release notes Contributing to Scrapy Versioning and API Stability Scrapy Docs »Settings
Edit on GitHub Settings
¶ The Scrapy settings allows you to customize the behaviour of all Scrapy
components, including the core, extensions, pipelines and spiders themselves.
The infrastructure of the settings provides a global namespace of key-value mappings
that the code can use to pull configuration values from. The settings can be
populated through different mechanisms, which are described below.
The settings are also the mechanism for selecting the currently active Scrapy
project (in case you have many).
For a list of available built-in settings see: .Built-in settings reference Designating the settings
¶ When you use Scrapy, you have to tell it which settings you’re using. You can
do this by using an environment variable, .SCRAPY_SETTINGS_MODULE The value of should be in Python path syntax, e.g.
SCRAPY_SETTINGS_MODULE . Note that the settings module should be on the
Python myproject.settings import search path .
Populating the settings
¶ Settings can be populated using different mechanisms, each of which having a
different precedence. Here is the list of them in decreasing order of
precedence:
Command line options (most precedence)
Settings per-spider
Project settings module
Default settings per-command
Default global settings (less precedence)
The population of these settings sources is taken care of internally, but a
manual handling is possible using API calls. See the
topic for reference.Settings API These mechanisms are described in more detail below.
1. Command line options
¶ Arguments provided by the command line are the ones that take most precedence,
overriding any other options. You can explicitly override one (or more)
settings using the (or -s ) command line option.--set Example:
scrapy crawl myspider -s LOG_FILE = scrapy.log
2. Settings per-spider
¶ Spiders (See the chapter for reference) can define their
own settings that will take precedence and override the project ones. They can
do so by setting their Spiders attribute:custom_settings class MySpider( scrapy.Spider) :
name = 'myspider' custom_settings = { 'SOME_SETTING' : 'some value' ,
} 3. Project settings module
¶ The project settings module is the standard configuration file for your Scrapy
project, it’s where most of your custom settings will be populated. For a
standard Scrapy project, this means you’ll be adding or changing the settings
in the file created for your project.settings.py 4. Default settings per-command
¶ Each command can have its own default
settings, which override the global default settings. Those custom command
settings are specified in the Scrapy tool attribute of the command
class.default_settings 5. Default global settings
¶ The global defaults are located in the module and documented in the scrapy.settings.default_settings section.Built-in settings reference How to access settings
¶ In a spider, the settings are available through :self.settings class MySpider ( scrapy . Spider ): name = 'myspider' start_urls = [ 'http://example.com' ] def parse ( self , response ): print ( "Existing settings: %s " % self . settings . attributes . keys ()) Note
The attribute is set in the base Spider class after the spider
is initialized. If you want to use the settings before the initialization
(e.g., in your spider’s settings method), you’ll need to override the
__init__() method.from_crawler() Settings can be accessed through the attribute of the Crawler that is passed to scrapy.crawler.Crawler.settings method in
extensions, middlewares and item pipelines:from_crawler class MyExtension ( object ): def __init__ ( self , log_is_enabled = False ): if log_is_enabled : print ( "log is enabled!" ) @classmethod def from_crawler ( cls , crawler ): settings = crawler . settings return cls ( settings . getbool ( 'LOG_ENABLED' )) The settings object can be used like a dict (e.g.,
), but it’s usually preferred to extract the setting
in the format you need it to avoid type errors, using one of the methods
provided by the settings['LOG_ENABLED'] API.Settings Rationale for setting names
¶ Setting names are usually prefixed with the component that they configure. For
example, proper setting names for a fictional robots.txt extension would be
, ROBOTSTXT_ENABLED , ROBOTSTXT_OBEY , etc.ROBOTSTXT_CACHEDIR Built-in settings reference
¶ Here’s a list of all available Scrapy settings, in alphabetical order, along
with their default values and the scope where they apply.
The scope, where available, shows where the setting is being used, if it’s tied
to any particular component. In that case the module of that component will be
shown, typically an extension, middleware or pipeline. It also means that the
component must be enabled in order for the setting to have any effect.
AWS_ACCESS_KEY_ID
¶ Default: None The AWS access key used by code that requires access to Amazon Web services ,
such as the .S3 feed storage backend AWS_SECRET_ACCESS_KEY
¶ Default: None The AWS secret key used by code that requires access to Amazon Web services ,
such as the .S3 feed storage backend BOT_NAME
¶ Default: 'scrapybot' The name of the bot implemented by this Scrapy project (also known as the
project name). This will be used to construct the User-Agent by default, and
also for logging.
It’s automatically populated with your project name when you create your
project with the command.startproject CONCURRENT_ITEMS
¶ Default: 100 Maximum number of concurrent items (per response) to process in parallel in the
Item Processor (also known as the ).Item Pipeline CONCURRENT_REQUESTS
¶ Default: 16 The maximum number of concurrent (ie. simultaneous) requests that will be
performed by the Scrapy downloader.
CONCURRENT_REQUESTS_PER_DOMAIN
¶ Default: 8 The maximum number of concurrent (ie. simultaneous) requests that will be
performed to any single domain.
See also: and its
AutoThrottle extension option.AUTOTHROTTLE_TARGET_CONCURRENCY CONCURRENT_REQUESTS_PER_IP
¶ Default: 0 The maximum number of concurrent (ie. simultaneous) requests that will be
performed to any single IP. If non-zero, the
setting is ignored, and this one is
used instead. In other words, concurrency limits will be applied per IP, not
per domain.CONCURRENT_REQUESTS_PER_DOMAIN This setting also affects and
DOWNLOAD_DELAY : if AutoThrottle extension is non-zero, download delay is enforced per IP, not per domain.CONCURRENT_REQUESTS_PER_IP DEFAULT_ITEM_CLASS
¶ Default: 'scrapy.item.Item' The default class that will be used for instantiating items in the .the
Scrapy shell DEFAULT_REQUEST_HEADERS
¶ Default:
{ 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' , 'Accept-Language' : 'en' , } The default headers used for Scrapy HTTP Requests. They’re populated in the
.DefaultHeadersMiddleware DEPTH_LIMIT
¶ Default: 0 Scope: scrapy.spidermiddlewares.depth.DepthMiddleware The maximum depth that will be allowed to crawl for any site. If zero, no limit
will be imposed.
DEPTH_PRIORITY
¶ Default: 0 Scope: scrapy.spidermiddlewares.depth.DepthMiddleware An integer that is used to adjust the request priority based on its depth:
if zero (default), no priority adjustment is made from depth
a positive value will decrease the priority, i.e. higher depth
requests will be processed later ; this is commonly used when doing
breadth-first crawls (BFO)a negative value will increase priority, i.e., higher depth requests
will be processed sooner (DFO)
See also: about tuning Scrapy for BFO or DFO.Does Scrapy crawl in breadth-first or depth-first order? Note
This setting adjusts priority in the opposite way compared to
other priority settings and REDIRECT_PRIORITY_ADJUST .RETRY_PRIORITY_ADJUST DEPTH_STATS
¶ Default: True Scope: scrapy.spidermiddlewares.depth.DepthMiddleware Whether to collect maximum depth stats.
DEPTH_STATS_VERBOSE
¶ Default: False Scope: scrapy.spidermiddlewares.depth.DepthMiddleware Whether to collect verbose depth stats. If this is enabled, the number of
requests for each depth is collected in the stats.
DNSCACHE_ENABLED
¶ Default: True Whether to enable DNS in-memory cache.
DNSCACHE_SIZE
¶ Default: 10000 DNS in-memory cache size.
DNS_TIMEOUT
¶ Default: 60 Timeout for processing of DNS queries in seconds. Float is supported.
DOWNLOADER
¶ Default: 'scrapy.core.downloader.Downloader' The downloader to use for crawling.
DOWNLOADER_HTTPCLIENTFACTORY
¶ Default: 'scrapy.core.downloader.webclient.ScrapyHTTPClientFactory' Defines a Twisted class to use for HTTP/1.0
connections (for protocol.ClientFactory ).HTTP10DownloadHandler Note
HTTP/1.0 is rarely used nowadays so you can safely ignore this setting,
unless you use Twisted<11.1, or if you really want to use HTTP/1.0
and override for DOWNLOAD_HANDLERS_BASE scheme
accordingly, i.e. to
http(s) .'scrapy.core.downloader.handlers.http.HTTP10DownloadHandler' DOWNLOADER_CLIENTCONTEXTFACTORY
¶ Default: 'scrapy.core.downloader.contextfactory.ScrapyClientContextFactory' Represents the classpath to the ContextFactory to use.
Here, “ContextFactory” is a Twisted term for SSL/TLS contexts, defining
the TLS/SSL protocol version to use, whether to do certificate verification,
or even enable client-side authentication (and various other things).
Note
Scrapy default context factory does NOT perform remote server
certificate verification . This is usually fine for web scraping.If you do need remote server certificate verification enabled,
Scrapy also has another context factory class that you can set,
,
which uses the platform’s certificates to validate remote endpoints.
'scrapy.core.downloader.contextfactory.BrowserLikeContextFactory' This is only available if you use Twisted>=14.0. If you do use a custom ContextFactory, make sure it accepts a parameter at init (this is the method method mapping
OpenSSL.SSL ).DOWNLOADER_CLIENT_TLS_METHOD DOWNLOADER_CLIENT_TLS_METHOD
¶ Default: 'TLS' Use this setting to customize the TLS/SSL method used by the default
HTTP/1.1 downloader.
This setting must be one of these string values:
: maps to OpenSSL’s 'TLS' (a.k.a TLS_method() ),
which allows protocol negotiation, starting from the highest supported
by the platform; SSLv23_method() default, recommended : this value forces HTTPS connections to use TLS version 1.0 ;
set this if you want the behavior of Scrapy<1.1'TLSv1.0' : forces TLS version 1.1'TLSv1.1' : forces TLS version 1.2'TLSv1.2' : forces SSL version 3 ('SSLv3' not recommended )
Note
We recommend that you use PyOpenSSL>=0.13 and Twisted>=0.13
or above (Twisted>=14.0 if you can).
DOWNLOADER_MIDDLEWARES
¶ Default:: {} A dict containing the downloader middlewares enabled in your project, and their
orders. For more info see .Activating a downloader middleware DOWNLOADER_MIDDLEWARES_BASE
¶ Default:
{ 'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware' : 100 , 'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware' : 300 , 'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware' : 350 , 'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware' : 400 , 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware' : 500 , 'scrapy.downloadermiddlewares.retry.RetryMiddleware' : 550 , 'scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware' : 560 , 'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware' : 580 , 'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware' : 590 , 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware' : 600 , 'scrapy.downloadermiddlewares.cookies.CookiesMiddleware' : 700 , 'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware' : 750 , 'scrapy.downloadermiddlewares.stats.DownloaderStats' : 850 , 'scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware' : 900 , } A dict containing the downloader middlewares enabled by default in Scrapy. Low
orders are closer to the engine, high orders are closer to the downloader. You
should never modify this setting in your project, modify
instead. For more info see
DOWNLOADER_MIDDLEWARES .Activating a downloader middleware DOWNLOADER_STATS
¶ Default: True Whether to enable downloader stats collection.
DOWNLOAD_DELAY
¶ Default: 0 The amount of time (in secs) that the downloader should wait before downloading
consecutive pages from the same website. This can be used to throttle the
crawling speed to avoid hitting servers too hard. Decimal numbers are
supported. Example:
DOWNLOAD_DELAY = 0.25 # 250 ms of delay This setting is also affected by the setting (which is enabled by default). By default, Scrapy doesn’t wait a fixed
amount of time between requests, but uses a random interval between 0.5 * RANDOMIZE_DOWNLOAD_DELAY and 1.5 * DOWNLOAD_DELAY .DOWNLOAD_DELAY When is non-zero, delays are enforced
per ip address instead of per domain.CONCURRENT_REQUESTS_PER_IP You can also change this setting per spider by setting spider attribute.download_delay DOWNLOAD_HANDLERS
¶ Default: {} A dict containing the request downloader handlers enabled in your project.
See for example format.DOWNLOAD_HANDLERS_BASE DOWNLOAD_HANDLERS_BASE
¶ Default:
{ 'file' : 'scrapy.core.downloader.handlers.file.FileDownloadHandler' , 'http' : 'scrapy.core.downloader.handlers.http.HTTPDownloadHandler' , 'https' : 'scrapy.core.downloader.handlers.http.HTTPDownloadHandler' , 's3' : 'scrapy.core.downloader.handlers.s3.S3DownloadHandler' , 'ftp' : 'scrapy.core.downloader.handlers.ftp.FTPDownloadHandler' , } A dict containing the request download handlers enabled by default in Scrapy.
You should never modify this setting in your project, modify
instead.DOWNLOAD_HANDLERS You can disable any of these download handlers by assigning to their
URI scheme in None . E.g., to disable the built-in FTP
handler (without replacement), place this in your DOWNLOAD_HANDLERS :settings.py DOWNLOAD_HANDLERS = { 'ftp' : None , } DOWNLOAD_TIMEOUT
¶ Default: 180 The amount of time (in secs) that the downloader will wait before timing out.
Note
This timeout can be set per spider using spider attribute and per-request using download_timeout Request.meta key.download_timeout DOWNLOAD_MAXSIZE
¶ Default: 1073741824 (1024MB)The maximum response size (in bytes) that downloader will download.
If you want to disable it set to 0.
Note
This size can be set per spider using spider attribute and per-request using download_maxsize Request.meta key.download_maxsize This feature needs Twisted >= 11.1.
DOWNLOAD_WARNSIZE
¶ Default: 33554432 (32MB)The response size (in bytes) that downloader will start to warn.
If you want to disable it set to 0.
Note
This size can be set per spider using spider attribute and per-request using download_warnsize Request.meta key.download_warnsize This feature needs Twisted >= 11.1.
DUPEFILTER_CLASS
¶ Default: 'scrapy.dupefilters.RFPDupeFilter' The class used to detect and filter duplicate requests.
The default (
) filters based on request fingerprint using
the RFPDupeFilter function. In order to change
the way duplicates are checked you could subclass scrapy.utils.request.request_fingerprint and
override its RFPDupeFilter method. This method should accept
scrapy request_fingerprint object and return its fingerprint
(a string).Request DUPEFILTER_DEBUG
¶ Default: False By default, only logs the first duplicate request.
Setting RFPDupeFilter to DUPEFILTER_DEBUG will make it log all duplicate requests.True EDITOR
¶ Default: depends on the environment The editor to use for editing spiders with the command. It
defaults to the edit environment variable, if set. Otherwise, it defaults
to EDITOR (on Unix systems) or the IDLE editor (on Windows).vi EXTENSIONS
¶ Default:: {} A dict containing the extensions enabled in your project, and their orders.
EXTENSIONS_BASE
¶ Default:
{ 'scrapy.extensions.corestats.CoreStats' : 0 , 'scrapy.extensions.telnet.TelnetConsole' : 0 , 'scrapy.extensions.memusage.MemoryUsage' : 0 , 'scrapy.extensions.memdebug.MemoryDebugger' : 0 , 'scrapy.extensions.closespider.CloseSpider' : 0 , 'scrapy.extensions.feedexport.FeedExporter' : 0 , 'scrapy.extensions.logstats.LogStats' : 0 , 'scrapy.extensions.spiderstate.SpiderState' : 0 , 'scrapy.extensions.throttle.AutoThrottle' : 0 , } A dict containing the extensions available by default in Scrapy, and their
orders. This setting contains all stable built-in extensions. Keep in mind that
some of them need to be enabled through a setting.
For more information See the and the extensions user guide .list of available extensions FEED_TEMPDIR
¶ The Feed Temp dir allows you to set a custom folder to save crawler
temporary files before uploading with and
FTP feed storage .Amazon S3 ITEM_PIPELINES
¶ Default: {} A dict containing the item pipelines to use, and their orders. Order values are
arbitrary, but it is customary to define them in the 0-1000 range. Lower orders
process before higher orders.
Example:
ITEM_PIPELINES = { 'mybot.pipelines.validate.ValidateMyItem' : 300 , 'mybot.pipelines.validate.StoreMyItem' : 800 , } ITEM_PIPELINES_BASE
¶ Default: {} A dict containing the pipelines enabled by default in Scrapy. You should never
modify this setting in your project, modify instead.ITEM_PIPELINES LOG_ENABLED
¶ Default: True Whether to enable logging.
LOG_ENCODING
¶ Default: 'utf-8' The encoding to use for logging.
LOG_FILE
¶ Default: None File name to use for logging output. If , standard error will be used.None LOG_FORMAT
¶ Default: '%(asctime)s [%(name)s] %(levelname)s: %(message)s' String for formatting log messsages. Refer to the Python logging documentation for the whole list of available
placeholders.
LOG_DATEFORMAT
¶ Default: '%Y-%m-%d %H:%M:%S' String for formatting date/time, expansion of the placeholder
in %(asctime)s . Refer to the LOG_FORMAT Python datetime documentation for the whole list of available
directives.
LOG_LEVEL
¶ Default: 'DEBUG' Minimum level to log. Available levels are: CRITICAL, ERROR, WARNING,
INFO, DEBUG. For more info see .Logging LOG_STDOUT
¶ Default: False If , all standard output (and error) of your process will be redirected
to the log. For example if you True it will appear in the Scrapy
log.print 'hello' LOG_SHORT_NAMES
¶ Default: False If , the logs will just contain the root path. If it is set to True then it displays the component responsible for the log outputFalse MEMDEBUG_ENABLED
¶ Default: False Whether to enable memory debugging.
MEMDEBUG_NOTIFY
¶ Default: [] When memory debugging is enabled a memory report will be sent to the specified
addresses if this setting is not empty, otherwise the report will be written to
the log.
Example:
MEMDEBUG_NOTIFY = [ 'user@example.com' ] MEMUSAGE_ENABLED
¶ Default: False Scope: scrapy.extensions.memusage Whether to enable the memory usage extension that will shutdown the Scrapy
process when it exceeds a memory limit, and also notify by email when that
happened.
See .Memory usage extension MEMUSAGE_LIMIT_MB
¶ Default: 0 Scope: scrapy.extensions.memusage The maximum amount of memory to allow (in megabytes) before shutting down
Scrapy (if MEMUSAGE_ENABLED is True). If zero, no check will be performed.
See .Memory usage extension MEMUSAGE_CHECK_INTERVAL_SECONDS
¶ New in version 1.1. Default: 60.0 Scope: scrapy.extensions.memusage The checks the current memory usage, versus the limits set by
Memory usage extension and MEMUSAGE_LIMIT_MB ,
at fixed time intervals.MEMUSAGE_WARNING_MB This sets the length of these intervals, in seconds.
See .Memory usage extension MEMUSAGE_NOTIFY_MAIL
¶ Default: False Scope: scrapy.extensions.memusage A list of emails to notify if the memory limit has been reached.
Example:
MEMUSAGE_NOTIFY_MAIL = [ 'user@example.com' ] See .Memory usage extension MEMUSAGE_REPORT
¶ Default: False Scope: scrapy.extensions.memusage Whether to send a memory usage report after each spider has been closed.
See .Memory usage extension MEMUSAGE_WARNING_MB
¶ Default: 0 Scope: scrapy.extensions.memusage The maximum amount of memory to allow (in megabytes) before sending a warning
email notifying about it. If zero, no warning will be produced.
NEWSPIDER_MODULE
¶ Default: '' Module where to create new spiders using the command.genspider Example:
NEWSPIDER_MODULE = 'mybot.spiders_dev' RANDOMIZE_DOWNLOAD_DELAY
¶ Default: True If enabled, Scrapy will wait a random amount of time (between 0.5 * and 1.5 * DOWNLOAD_DELAY ) while fetching requests from the same
website.DOWNLOAD_DELAY This randomization decreases the chance of the crawler being detected (and
subsequently blocked) by sites which analyze requests looking for statistically
significant similarities in the time between their requests.
The randomization policy is the same used by wget option.--random-wait If is zero (default) this option has no effect.DOWNLOAD_DELAY REACTOR_THREADPOOL_MAXSIZE
¶ Default: 10 The maximum limit for Twisted Reactor thread pool size. This is common
multi-purpose thread pool used by various Scrapy components. Threaded
DNS Resolver, BlockingFeedStorage, S3FilesStore just to name a few. Increase
this value if you’re experiencing problems with insufficient blocking IO.
REDIRECT_MAX_TIMES
¶ Default: 20 Defines the maximum times a request can be redirected. After this maximum the
request’s response is returned as is. We used Firefox default value for the
same task.
REDIRECT_PRIORITY_ADJUST
¶ Default: +2 Scope: scrapy.downloadermiddlewares.redirect.RedirectMiddleware Adjust redirect request priority relative to original request:
a positive priority adjust (default) means higher priority. a negative priority adjust means lower priority.
RETRY_PRIORITY_ADJUST
¶ Default: -1 Scope: scrapy.downloadermiddlewares.retry.RetryMiddleware Adjust retry request priority relative to original request:
a positive priority adjust means higher priority.
a negative priority adjust (default) means lower priority. ROBOTSTXT_OBEY
¶ Default: False Scope: scrapy.downloadermiddlewares.robotstxt If enabled, Scrapy will respect robots.txt policies. For more information see
.RobotsTxtMiddleware Note
While the default value is for historical reasons,
this option is enabled by default in settings.py file generated
by False command.scrapy startproject SCHEDULER
¶ Default: 'scrapy.core.scheduler.Scheduler' The scheduler to use for crawling.
SCHEDULER_DEBUG
¶ Default: False Setting to will log debug information about the requests scheduler.
This currently logs (only once) if the requests cannot be serialized to disk.
Stats counter (True ) tracks the number of times this happens.scheduler/unserializable Example entry in logs:
1956-01-31 00:00:00+0800 [scrapy.core.scheduler] ERROR: Unable to serialize request:
<GET http://example.com> - reason: cannot serialize <Request at 0x9a7c7ec>
(type Request)> - no more unserializable requests will be logged
(see 'scheduler/unserializable' stats counter)
SCHEDULER_DISK_QUEUE
¶ Default: 'scrapy.squeues.PickleLifoDiskQueue' Type of disk queue that will be used by scheduler. Other available types are
, scrapy.squeues.PickleFifoDiskQueue ,
scrapy.squeues.MarshalFifoDiskQueue .scrapy.squeues.MarshalLifoDiskQueue SCHEDULER_MEMORY_QUEUE
¶ Default: 'scrapy.squeues.LifoMemoryQueue' Type of in-memory queue used by scheduler. Other available type is:
.scrapy.squeues.FifoMemoryQueue SCHEDULER_PRIORITY_QUEUE
¶ Default: 'queuelib.PriorityQueue' Type of priority queue used by scheduler.
SPIDER_CONTRACTS
¶ Default:: {} A dict containing the spider contracts enabled in your project, used for
testing spiders. For more info see .Spiders Contracts SPIDER_CONTRACTS_BASE
¶ Default:
{ 'scrapy.contracts.default.UrlContract' : 1 , 'scrapy.contracts.default.ReturnsContract' : 2 , 'scrapy.contracts.default.ScrapesContract' : 3 , } A dict containing the scrapy contracts enabled by default in Scrapy. You should
never modify this setting in your project, modify instead. For more info see SPIDER_CONTRACTS .Spiders Contracts You can disable any of these contracts by assigning to their class
path in None . E.g., to disable the built-in
SPIDER_CONTRACTS , place this in your ScrapesContract :settings.py SPIDER_CONTRACTS = { 'scrapy.contracts.default.ScrapesContract' : None , } SPIDER_LOADER_CLASS
¶ Default: 'scrapy.spiderloader.SpiderLoader' The class that will be used for loading spiders, which must implement the
.SpiderLoader API SPIDER_MIDDLEWARES
¶ Default:: {} A dict containing the spider middlewares enabled in your project, and their
orders. For more info see .Activating a spider middleware SPIDER_MIDDLEWARES_BASE
¶ Default:
{ 'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware' : 50 , 'scrapy.spidermiddlewares.offsite.OffsiteMiddleware' : 500 , 'scrapy.spidermiddlewares.referer.RefererMiddleware' : 700 , 'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware' : 800 , 'scrapy.spidermiddlewares.depth.DepthMiddleware' : 900 , } A dict containing the spider middlewares enabled by default in Scrapy, and
their orders. Low orders are closer to the engine, high orders are closer to
the spider. For more info see .Activating a spider middleware SPIDER_MODULES
¶ Default: [] A list of modules where Scrapy will look for spiders.
Example:
SPIDER_MODULES = [ 'mybot.spiders_prod' , 'mybot.spiders_dev' ] STATS_CLASS
¶ Default: 'scrapy.statscollectors.MemoryStatsCollector' The class to use for collecting stats, who must implement the
.Stats Collector API STATS_DUMP
¶ Default: True Dump the (to the Scrapy log) once the spider
finishes.Scrapy stats For more info see: .Stats Collection STATSMAILER_RCPTS
¶ Default: (empty list)[] Send Scrapy stats after spiders finish scraping. See
for more info.StatsMailer TELNETCONSOLE_ENABLED
¶ Default: True A boolean which specifies if the will be enabled (provided its extension is also enabled).telnet console TELNETCONSOLE_PORT
¶ Default: [6023, 6073] The port range to use for the telnet console. If set to or None , a
dynamically assigned port is used. For more info see
0 .Telnet Console TEMPLATES_DIR
¶ Default: dir inside scrapy moduletemplates The directory where to look for templates when creating new projects with
command and new spiders with startproject command.genspider The project name must not conflict with the name of custom files or directories
in the subdirectory.project URLLENGTH_LIMIT
¶ Default: 2083 Scope: spidermiddlewares.urllength The maximum URL length to allow for crawled URLs. For more information about
the default value for this setting see: http://www.boutell.com/newfaq/misc/urllength.html USER_AGENT
¶ Default: "Scrapy/VERSION (+http://scrapy.org)" The default User-Agent to use when crawling, unless overridden.
Settings documented elsewhere:
¶ The following settings are documented elsewhere, please check each specific
case to see how to enable and use them.
AJAXCRAWL_ENABLED AUTOTHROTTLE_DEBUG AUTOTHROTTLE_ENABLED AUTOTHROTTLE_MAX_DELAY AUTOTHROTTLE_START_DELAY AUTOTHROTTLE_TARGET_CONCURRENCY CLOSESPIDER_ERRORCOUNT CLOSESPIDER_ITEMCOUNT CLOSESPIDER_PAGECOUNT CLOSESPIDER_TIMEOUT COMMANDS_MODULE COMPRESSION_ENABLED COOKIES_DEBUG COOKIES_ENABLED FEED_EXPORTERS FEED_EXPORTERS_BASE FEED_EXPORT_ENCODING FEED_EXPORT_FIELDS FEED_FORMAT FEED_STORAGES FEED_STORAGES_BASE FEED_STORE_EMPTY FEED_URI FILES_EXPIRES FILES_RESULT_FIELD FILES_STORE FILES_STORE_S3_ACL FILES_URLS_FIELD HTTPCACHE_ALWAYS_STORE HTTPCACHE_DBM_MODULE HTTPCACHE_DIR HTTPCACHE_ENABLED HTTPCACHE_EXPIRATION_SECS HTTPCACHE_GZIP HTTPCACHE_IGNORE_HTTP_CODES HTTPCACHE_IGNORE_MISSING HTTPCACHE_IGNORE_RESPONSE_CACHE_CONTROLS HTTPCACHE_IGNORE_SCHEMES HTTPCACHE_POLICY HTTPCACHE_STORAGE HTTPERROR_ALLOWED_CODES HTTPERROR_ALLOW_ALL HTTPPROXY_AUTH_ENCODING IMAGES_EXPIRES IMAGES_MIN_HEIGHT IMAGES_MIN_WIDTH IMAGES_RESULT_FIELD IMAGES_STORE IMAGES_STORE_S3_ACL IMAGES_THUMBS IMAGES_URLS_FIELD MAIL_FROM MAIL_HOST MAIL_PASS MAIL_PORT MAIL_SSL MAIL_TLS MAIL_USER METAREFRESH_ENABLED METAREFRESH_MAXDELAY REDIRECT_ENABLED REDIRECT_MAX_TIMES REFERER_ENABLED RETRY_ENABLED RETRY_HTTP_CODES RETRY_TIMES TELNETCONSOLE_HOST TELNETCONSOLE_PORT Next Previous
Built with © Copyright 2008-2016, Scrapy developers.
Revision 5586fc7e .
Sphinx using a theme provided by Read the Docs .  Read the Docs v: latest
Versions
latest 1.3 1.2 1.1 1.0 0.24 0.22 0.20 master Downloads
PDF HTML Epub On Read the Docs
Project Home Builds Downloads On GitHub
View Edit Search
[placeholder]Search docs
Free document hosting provided by Read the Docs . 